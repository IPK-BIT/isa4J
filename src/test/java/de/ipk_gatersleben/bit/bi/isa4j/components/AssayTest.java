/**
 * Copyright (c) 2020 Leibniz Institute of Plant Genetics and Crop Plant Research (IPK), Gatersleben, Germany.
 * All rights reserved. This program and the accompanying materials are made available under the terms of the GNU GPLv3 license (https://www.gnu.org/licenses/gpl-3.0.en.html)
 *
 * Contributors:
 *      Leibniz Institute of Plant Genetics and Crop Plant Research (IPK), Gatersleben, Germany
 */
package de.ipk_gatersleben.bit.bi.isa4j.components;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class AssayTest {
	Assay assay;
	
	@BeforeEach
	void resetAssay() {
		this.assay = new Assay("a_assay.txt");
	}
	
	@Test
	void testWriteLine() throws IOException {
		// Like in the study tests, compare our output to one generated by python isatools
    	BufferedReader correctFile = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("python_originals/a_assay.txt")));
    	ByteArrayOutputStream os   = new ByteArrayOutputStream();
    	this.assay.directToStream(os);
    	
    	Protocol protocol1 = new Protocol("foobar Protocol");
    	Protocol protocol2 = new Protocol("Protocol2");
    	Factor fa_drought_stress = new Factor("drought stress");
    	for(int i = 1; i < 6; i++) {    		
    		Sample sample = new Sample("Sample no. " + i);
    		Material material = new Material("Extract Name", "extract-"+i);
    		DataFile datafile = new DataFile("Raw Data File", "sequenced-data-"+i);
    		
    		Process extraction_process = new Process(protocol1);
    		extraction_process.setInput(sample);
    		extraction_process.setOutput(material);
    		
    		Sample sample2 = new Sample("Target Sample");
    		sample2.addFactorValue(new FactorValue(fa_drought_stress, 34.12, new OntologyAnnotation("m")));
    		Process sequencingProcess = new Process(protocol2);
    		sequencingProcess.setInput(material);
    		sequencingProcess.setOutput(datafile);
    		
    		if(!assay.hasWrittenHeaders())
    			assay.writeHeadersFromExample(sample);
    		assay.writeLine(sample);
    	}
    	
    	this.assay.releaseStream();
    	
    	BufferedReader ourFile	   = new BufferedReader(new StringReader(os.toString()));
    	
    	String correctLine = null;
    	String ourLine	   = null;
    	while((correctLine = correctFile.readLine()) != null && (ourLine = ourFile.readLine()) != null) {
    		assertEquals(correctLine, ourLine);
    	}
    	// Assert that both files are finished here as well
    	assertNull(ourFile.readLine());
    	assertNull(correctFile.readLine());
	}

}
